import numpy as np
import os
import scipy.io
import falco.config.ModelParameters

def _get_default_LC_config_data():
    _LC_default_LC_config_data_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "_default_LC_config_data.mat")
    return scipy.io.loadmat(_LC_default_LC_config_data_file, struct_as_record=False, squeeze_me=True)["mp"]

def _recursive_compare(c1,c2):
    if type(c1) in (int,float,str,unicode):
        assert(c1==c2)
        return

    if type(c1) in (list, np.ndarray):
        assert all(np.array(c1)==np.array(c2))
        return

    c1_k = [k for k in dir(c1) if k[0]<>"_"]
    c2_k = [k for k in dir(c2) if k[0]<>"_"]
    assert(set(c1_k) == set(c2_k))
    
    for k in c1_k:
        v1 = eval("c1."+k)
        v2 = eval("c2."+k)
        _recursive_compare(v1,v2)

def test_default_LC_config():
    #Default config generated by Python
    mp1 = falco.config.ModelParameters.get_default_LC_config()
    #Default config generated by MATLAB
    mp2 = _get_default_LC_config_data()
    #Python class generated from a MATLAB struct
    mp3 = falco.config.ModelParameters.ModelParameters(mat_struct=mp2)

    _recursive_compare(mp1,mp2)
    _recursive_compare(mp1,mp3)
    _recursive_compare(mp2,mp3)
